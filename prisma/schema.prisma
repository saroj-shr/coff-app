generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  Order          Order[]
  ShippingDetail ShippingDetail?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id String @id @default(cuid())

  userDetails      User               @relation(fields: [userId], references: [id])
  userId           String
  ProductsOnOrders ProductsOnOrders[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  highlights  String[]
  description String   @db.Text
  details     String   @db.Text
  isInStock   Boolean  @default(true)
  createdAt   DateTime @default(now())

  beanType   BeanType @relation(fields: [beanTypeId], references: [id])
  beanTypeId String

  availableRoastTypes RoastsTypeOnProduct[]
  availableGearType   GearTypeOnProduct[]
  productsOnOrders    ProductsOnOrders[]
  images              Image[]
}

model ProductsOnOrders {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String

  @@id([productId, orderId])
}

model BeanType {
  id   String @id @default(cuid())
  name String

  Product Product[]
}

model RoastsType {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  RoastsTypeOnProduct RoastsTypeOnProduct[]
}

model RoastsTypeOnProduct {
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  roastsType   RoastsType @relation(fields: [roastsTypeId], references: [id])
  roastsTypeId String

  @@id([productId, roastsTypeId])
}

model GearType {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  GearTypeOnProduct GearTypeOnProduct[]
}

model GearTypeOnProduct {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  gearType   GearType @relation(fields: [gearTypeId], references: [id])
  gearTypeId String

  @@id([productId, gearTypeId])
}

model Image {
  id        String   @id @default(cuid())
  src       String
  alt       String
  createdAt DateTime @default(now())

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model ShippingDetail {
  id            String   @id @default(cuid())
  address       String
  city          String
  province      String
  contactNumber String
  createdAt     DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}
